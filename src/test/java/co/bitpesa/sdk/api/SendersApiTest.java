/*
 * BitPesa API
 * Reference documentation for the BitPesa API V1
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package co.bitpesa.sdk.api;

import co.bitpesa.sdk.ApiException;
import co.bitpesa.sdk.model.Sender;
import co.bitpesa.sdk.model.SenderListResponse;
import co.bitpesa.sdk.model.SenderRequest;
import co.bitpesa.sdk.model.SenderResponse;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SendersApi
 */
@Ignore
public class SendersApiTest {

    private final SendersApi api = new SendersApi();

    
    /**
     * Deleting a sender
     *
     * Deletes a single sender by the Sender ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSenderTest() throws ApiException {
        UUID senderID = null;
        SenderResponse response = api.deleteSender(senderID);

        // TODO: test validations
    }
    
    /**
     * Fetching a sender
     *
     * Returns a single sender by the Sender ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderTest() throws ApiException {
        UUID senderID = null;
        SenderResponse response = api.getSender(senderID);

        // TODO: test validations
    }
    
    /**
     * Listing senders
     *
     * Get a list of available senders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSendersTest() throws ApiException {
        Integer page = null;
        Integer per = null;
        String createdAtFrom = null;
        String createdAtTo = null;
        SenderListResponse response = api.getSenders(page, per, createdAtFrom, createdAtTo);

        // TODO: test validations
    }
    
    /**
     * Updating a sender
     *
     * Updates the sender specified in the URL path.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchSenderTest() throws ApiException {
        UUID senderID = null;
        SenderRequest senderRequest = null;
        SenderResponse response = api.patchSender(senderID, senderRequest);

        // TODO: test validations
    }
    
    /**
     * Creating a sender
     *
     * Creates a new sender in our system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSendersTest() throws ApiException {
        Sender sender = null;
        SenderResponse response = api.postSenders(sender);

        // TODO: test validations
    }
    
}
